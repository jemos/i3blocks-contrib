#!/usr/bin/env perl
# Copyright 2014 Pierre Mavro <deimos@deimos.fr>
# Copyright 2014 Vivien Didelot <vivien@didelot.org>
# Copyright 2014 Andreas Guldstrand <andreas.guldstrand@gmail.com>
# Copyright 2014 Benjamin Chretien <chretien at lirmm dot fr>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use utf8;
use Getopt::Long;

binmode(STDOUT, ":utf8");

# default values
my $t_warn = $ENV{T_WARN} || undef;
my $t_crit = $ENV{T_CRIT} || undef;
my $chip = $ENV{SENSOR_CHIP} || "";
my $multi = $ENV{MULTI_VALUE} || 0;
my $verbose = 0;
my $temperature = undef;

sub help {
    print "Usage: temperature [-w <warning>] [-c <critical>] [--chip <chip>]\n";
    print "-w <percent>: warning threshold to become yellow\n";
    print "-c <percent>: critical threshold to become red\n";
    print "-m: multiple values for this sensor (will calculate maximum value)\n";
    print "-v: verbose output\n";
    print "--chip <chip>: sensor chip\n";
    exit 0;
}

GetOptions("help|h" => \&help,
           "w=i"    => \$t_warn,
           "c=i"    => \$t_crit,
           "m"      => \$multi,
           "v"      => \$verbose,
           "chip=s" => \$chip);

if($verbose) {
  print("t_warn: $t_warn\n");
  print("t_crit: $t_crit\n");
  print("multi: $multi\n");
  print("chip: $chip\n");
}

# Get chip temperature
my @out = `sensors -u $chip`;
my $critv = undef;
my $maxv = undef;
my $count = 0;
foreach(@out) {
    my $line = $_;
    chomp $line;

    if (!defined($maxv) && $line =~ /^\s*temp[0-9]_max:\s+[\+]*([\-]*\d+\.\d)/) {
        $maxv = $1;
    }
    if (!defined($critv) && $line =~ /^\s*temp[0-9]_crit:\s+[\+]*([\-]*\d+\.\d)/) {
        $critv = $1;
    }

    if ($line =~ /^\s*temp[0-9]_input:\s+[\+]*([\-]*\d+\.\d)/) {
	if ( $multi ) {
		if ( !defined($temperature) || ($temperature < $1) ) {
			$temperature = $1;
		}
	} else {
		if ( !defined($temperature) ) {
	        	$temperature = $1;
		}
	}
    }
}

!defined($temperature) and die 'Cannot find temperature';

# Set crit and warn automatically if user didn't provided one and we were able to retrieve one from sensors
if( !defined($t_crit) ) {
    if( !defined($critv) ) {
	$t_crit = 90;
    } else {
	$t_crit = $critv;
    }
}
if( !defined($t_warn) ) {
    if( !defined($maxv) ) {
	$t_warn = 70;
    } else {
	$t_warn = $maxv;
    }
}

if ($verbose) {
    print "temp=$temperature critv=$critv highv=$maxv t_crit=$t_crit t_warn=$t_warn multi=$multi\n";
}

# Print short_text, full_text
print "$temperatureÂ°C\n" x2;

# Print color, if needed
if ($temperature >= $t_crit) {
    print "#FF0000\n";
    exit 33;
} elsif ($temperature >= $t_warn) {
    print "#FFFC00\n";
}

exit 0;
